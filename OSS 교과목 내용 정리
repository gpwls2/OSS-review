# 💠 Git Bash 명령어

깃 설정 
→ 깃을 설치한 이후 깃 배시에서 처음 할 일

◎설정 명령 구조
$ git config --설정범위 설정변수 설정값

◎주요 6가지 설정
$ git config --global user.name (?) 사용자 이름

$ git config --global user.email (?)@gmail.com 사용자 전자메일

$ git config --global core.autocrlf true 줄바꿈 자동변환

$ git config --global core.safecrlf false 줄바꿈 안전 설정

$ git config --global core.editor 'code --wait' 기본 편집기 설정

$ git config --global init.defaultBranch main 기본 브랜치 이름

◎저장소 생성
$ git init/ git init.
→ 현재 디렉토리를 git repository로 만들기 위해 사용
$ git init basic
→ 현재 폴더 하부에 폴더 basic을 생성하고 git repository로 만들기 위해 사용

◎저장소 생성 확인
$ cd basic 폴더 이동
$ ls -al 파일 확인

◎파일 삭제
● 리눅스 명령 파일 삭제
 $ rm [file]
→ 작업 디렉토리에서 file 삭제

● 깃 명령 파일 삭제
 $ git rm [file]
→ 작업 디렉토리와 스테이징 영역에서 모두 file 삭제
 $ git rm --cached [file]
→ 스테이징 영역에서 file 삭제 (작업 디렉토리에서는 삭제x)
→ $ git ls-files 결과에서 안 보임 

◎파일 복원 
$ git restore [file]
→ 작업 디렉토리의 파일 f를 스테이징 영역의 파일 상태로 복구

$ git restore --staged [file]
→ 깃 저장소의 최신 커밋 상태의 파일 f를 스테이징 영역에 복구

$ git restore --source = Head --worktree [file]
$ git restore --source = Head [file]
→ 깃 저장소 상태를 작업 디렉토리에 복원

$ git restore --source = Head --staged --worktree [file]
→  깃 저장소 상태를 스테이징 영역과 작업 디렉토리에 함께 복원

◎임시 저장 명령
$ git stash
$ git stash -m '메세지'
$ git stash save
$ git stash save '메세지'
-> 작업 디렉토리와 스테이징 영역을 숨김(stash)에 저장하고 작업 폴더를 정리

● 임시 저장된 stash 반영
$ git stash pop
$ git stash pop stash@{n}
→ 최근 또는 지정된 임시저장소 내용을 가져와 반영하고 삭제

$ git stash apply
$ git stash apply stash@{n}
→ 최근 또는 지정된 임시저장소 내용을 가져와 반영, 작업 디렉토리만 반영, stash 목록은 그대로

$ git stash apply --index
$ git stash apply --index stash@{n}
→ 최근 또는 지정된 임시저장소 내용을 가져와 반영, 작업 디렉토리와 스테이징 영역도 반영, stash 목록은 그대로

● 특정 stash 삭제와 모든 stash 삭제
$ git stash drop
→ 최근 임시저장 내용을 삭제

$ git stash drop stash@{n}
→ 지정된 임시저장 내용을 삭제

$ git stash clear
→ 모든 stash 목록을 모두 제거


